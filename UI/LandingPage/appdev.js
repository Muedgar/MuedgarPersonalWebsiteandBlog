/*
the ui to view

<article class="article-container">
                <a class="article-link" href="#">
                    <img class="article-img" src="./linkComponent/img1.jpeg" alt="" srcset="">
                    <h4 class="article-author">Authored by Mutangana Edgar</h4>
                    <p class="article-summary">The Surface Pro shares a lot of its design traits with its lower cost counterpart, However, the resolution on the Surface Pro is higher and is 1920x1080, and the screen</p>
                </a>
 </article>
*/

let applicationDev = {
    article1: {
        imagePreviewLink: "./appdev1.png",
        image1Link: "./appdev2.png",
        image2Link: "./appdev.jpeg",
        authorName: "Atlasian Agile Coach",
        articlePreview: "Agile development refers to any development process that is aligned with the concepts of the Agile Manifesto. The Manifesto was developed by a group of fourteen leading figures in the software industry, and reflects their experience of what approaches do and do not work for software development.",
        articleContent: "What is agile project management?Agile project management is an iterative approach to managing software development projects that focuses on continuous releases and incorporating customer feedback with every iteration.Software teams that embrace agile project management methodologies increase their development speed, expand collaboration, and foster the ability to better respond to market trends.Here is everything you need to know to get started or refine your agile project management practices. HistoryStemming from Toyota's lean manufacturing concept of the 1940s, software development teams have embraced agile methodologies to reduce waste and increase transparency, while quickly addressing their customers' ever-changing needs. A stark change from waterfall project management that focuses on 'big bang' launches, agile helps software teams collaborate better and innovate faster than ever before. Traditional agile project management can be categorized into two frameworks: scrum and kanban. While scrum is focused on fixed-length project iterations, kanban is focused on continuous releases. Upon completion, the team immediately moves on to the next. How scrum worksScrum is a framework for agile project management that uses fixed-length iterations of work, called sprints. There are four ceremonies that bring structure to each sprint.It all starts with the backlog, or body of work that needs to be done. In scrum, there are two backlogs: one is the product backlog (owned by the product owner) which is a prioritized list of features, and the other is the sprint backlog which is filled by taking issues from the top of the product backlog until the capacity for the next sprint is reached. Scrum teams have unique roles specific to their stake in the process. Typically there's a scrum master, or champion of the scrum method for the team; the product owner, who's the voice of the product; and the scrum team, who are often cross-functional team members in charge of getting s@#$ done."
    },
    article2: {
        imagePreviewLink: "./fronend1.png",
        image1Link: "./frontend2.jpeg",
        image2Link: "./frontend3.png",
        authorName: "Css Tricks",
        articlePreview: "The topical idea of “how to think like a front-end developer” began for me as a series of podcast interviews on ShopTalk Show. That was in preparation for a talk I was preparing (and gave) of the same name. That talk evolved into my essay The Great Divide, which evolved into the essay The Widening Responsibility for Front-End Developers.",
        articleContent: "But also, this entire site is loosely themed “how to think like a front-end developer”. My goal for this site is helping us all do that better.This post is a collection of articles that hone in on that idea. Some are very specific technical posts that I think embody front-end development. Some are more lofty philosophical musings. Some are links to other people’s articles.Part of the job of being a front-end developer is applying different techniques and technologies to pull off the desired UI and UX. Perhaps you work with a design team and implement their designs. I know when I look at a design (heck, even if I know I’m not going to be building it), my front-end brain starts triggering all sorts of things I know will be related to the task.We’re going to mostly be talking about design pattern choices and HTML/CSS tech choices. There is much more to the job of front-end development. Accessibility! Performance! Semantics! Design systems! All important stuff as well."
    },
    article3: {
        imagePreviewLink: "./backend1.png",
        image1Link: "./backend2.jpeg",
        image2Link: "./backend3.jpeg",
        authorName: "Upwork",
        articlePreview: "Backend Development is also known as server-side development. It is everything that the users don't see and contains behind-the-scenes activities that occur when performing any action on a website. It focuses primarily on databases, backend logic, APIs, and Servers. ... Thus, it is known as the backend.",
        articleContent: "If you’re not a developer or engineer, concepts like front-end vs. back-end development can be challenging to wrap your head around. Pile on all of the frameworks, programming languages, APIs, and libraries that developers use to build apps, and things can get pretty confusing.The good news? You don’t have to write code to understand the basics of back-end development and the various components of a typical “software stack.” In fact, knowing your way around it is helpful whether you’re a CEO, a hiring manager, a salesperson for a tech-based startup, or a product manager.To help you become a pro in all things back-end development, we’ve gathered up a series of articles that cover some key things to know—in a way non-developers can understand. You’ll not only know what server-side scripting is and what back-end engineers do, you’ll learn the pros of the different programming languages, how the cloud is changing things up, why APIs are so important, and how to make decisions about what frameworks are best for your app.What is Back-End development?Back-end development refers to the development of server-side logic that powers websites and apps from behind the scenes. It includes all the code needed to build out the database, server, and application. From database migrations to API integrations to setting up the server-side technologies that make a website tick, a back-end web developer may be the talent you need to get your next web project off the ground.Front-end vs back-end developmentTo understand the back end, or the “server side,” you also have to know the front end and how the two interact. The front end, also called “client-side” programming, is what happens in the browser—everything the end users see and interact with. The back end, on the other hand, happens on the server (on site, or in the cloud) and databases. It’s the machinery that works behind the scenes—everything the end user doesn’t see or directly interact with, but that powers what’s happening."
    },
    article4: {
        imagePreviewLink: "./dba1.jpeg",
        image1Link: "./dba2.png",
        image2Link: "./dba3.jpeg",
        authorName: "Science Direct",
        articlePreview: "This paper identifies and defines the facilities needed to enable a database administrator to organise and control the development and operational running of a database system. The data needed to support these facilities, termed control data is discussed, and a conceptual data model for a control database is presented. This control database forms the core of a database administration support environment.",
        articleContent: "The paper examines the facilities required from a database administration support environment for the effective specification and implementation of access control. A role-based model for access control is proposed, and is used to critically examine the current CODASYL approach to access control.This paper is based on the work of the BCS/CODASYL DDLC Database Administration Working Group, of which the authors are members. However, the opinions expressed in the paper are those of the authors.Database management systemdatabase administratoraccess controlstorage allocationThis paper develops the idea of a databaseadministr ation support environment (or DBASE)to assist a database administrator (DBA) inthe analysis, design, implementation, andoperational running of a database system.Specifically, it concentrates on the DBASEaspects required for implementation andoperational running. In addition, it examinesone issue, that of the specification andimplementation of access control, in detail.This paper has the following structure. Thenext section establishes the general scope andpurpose of a DBASE. The third sectionconsists of a definition of the facilitiesrequired in one general aspect of a DBASE,namely that concerned with the implementationand operational running of a database system.The following section presents the dataneeded to support these facilities, developinga conceptual data model of the required controldatabase. The final section examines theDBASE requirements for the specification andimplementation of access control. These areused to critically examine the current CODASYLapproach to access control.Most of the facilities discussed would beneeded for any type of database system, butthroughout this paper a CODASYL databasesystem is assumed and the terminology isconsistent with that of (CODASYL 81) unlessotherwise stated.THE NOTION OF A DBASEIt is now generally accepted that thedevelopment of a database system involvesa number of stages. Following (Robinson 81)and (OU 80), these stages may be summarisedas follows.1. Conceptual definition, consisting ofdata analysis and functional analysis, toyield a conceptual data model and thecorresponding conceptual process model forthe organisation in question. Typically theconceptual data model is defined using somevariant on the construc ts proposed in(Chen 76).2. Logical schema definition consisting ofa translation of the objects in theconceptual data model into objects in theschema of the chosen database approach.3. Storage schema definition consisting ofa translation of the objects in the schemainto objects in the storage schema.4. Storage media definition, being thedefinition of the storage media required tosupport the stored representation of thedatabase.5. Operational definition, being thedefinition of the required parameters forconcurrency, recovery, etc. that allow theoperational running"
    },
    article5: {
        imagePreviewLink: "./testing1.png",
        image1Link: "./testing2.jpeg",
        image2Link: "./testing3.jpeg",
        authorName: "InfoQ",
        articlePreview: "Canary releases got their name from the use of canaries—tiny birds—in coal mines to detect toxic gases before they hurt humans. Workers would carry a canary bird in a birdcage as they walked into a mine and worked inside it. If they noticed that the bird had stopped chirping, they would realize that there was probably toxic gas and would flee to safety. ",
        articleContent: "In the present era, we can roll out features to just certain users. For example, the canary testing customers could have opted in for a Beta testing program or they could have been selected by setting some flags to allow only certain types of users to see the new version. A Product Owner decides to make a canary release to assess how customers respond to the new features of the software. They make the canary release available to a small number of users first and then, depending on the response, the release is made available to a gradually expanding group of users. For example, the build could first be released to internal users, then to some specific profiles, and so on. A well-designed canary test suite can help discover what users think about the new feature. Some questions that we expect responses to include “Is it worth rolling out to the larger audience?” and “Are users even noticing the new feature?”The good part about canary releases is that there is always an option to roll back if we see problems in the live environment without having impacted the entire customer base. In the mining example, miners would carry caged canary birds in the mine and if a bird became ill or died, the mine workers would evacuate immediately. In software terms, this is a rollback!There is a difference between what a canary release is vs. what people interpret it to be. As with many terms and concepts, the understanding of a canary release varies across organizations and teams. It has naturally followed that teams and initiatives end up interpreting canary releases to meet their pressing needs. In some cases, teams and initiatives also design processes based on what they can manage socially, politically, and in terms of capability and budget.A tester would discover issues that users wouldn’t know to test for, and which could cause them to walk away from the app if they encounter those issues even once. As anyone from marketing can confirm, customer acquisition is expensive, but retaining a dissatisfied user is even more so. "
    },
    article6: {
        imagePreviewLink: "./production1.png",
        image1Link: "./production2.png",
        image2Link: "./production3.png",
        authorName: "Wikipedia",
        articlePreview: "The general deployment process consists of several interrelated activities with possible transitions between them. These activities can occur at the producer side or at the consumer side or both. Because every software system is unique, the precise processes or procedures within each activity can hardly be defined. ",
        articleContent: "When computers were extremely large, expensive, and bulky (mainframes and minicomputers), the software was often bundled together with the hardware by manufacturers. If business software needed to be installed on an existing computer, this might require an expensive, time-consuming visit by a systems architect or a consultant. For complex, on-premises installation of enterprise software today, this can still sometimes be the case.However, with the development of mass market software for the new age of microcomputers in the 1980s came new forms of software distribution – first cartridges, then Compact Cassettes, then floppy disks, then (in the 1990s and later) optical media, the internet and flash drives. This meant that software deployment could be left to the customer. However, it was also increasingly recognized over time that configuration of the software by the customer was important and that this should ideally have a user-friendly interface (rather than, for example, requiring the customer to edit registry entries on Windows).In pre-internet software deployments, deployments (and their closely related cousin, new software releases) were of necessity expensive, infrequent, bulky affairs. It is arguable therefore that the spread of the internet made end-to-end agile software development possible. Indeed, the advent of cloud computing and software as a service meant that software could be deployed to a large number of customers in minutes, over the internet. This also meant that typically, deployment schedules were now determined by the software supplier, not by the customers. Such flexibility led to the rise of continuous delivery as a viable option, especially for less risky web applications.The release activity follows from the completed development process and is sometimes classified as part of the development process rather than deployment process. It includes all the operations to prepare a system for assembly and transfer to the computer system(s) on which it will be run in production. Therefore, it sometimes involves determining the resources required for the system to operate with tolerable performance and planning and/or documenting subsequent activities of the deployment process.For simple systems, installation involves establishing some form of command, shortcut, script or service for executing the software (manually or automatically). For complex systems it may involve configuration of the system – possibly by asking the end user questions about its intended use, or directly asking them how they would like it to be configured – and/or making all the required subsystems ready to use. Activation is the activity of starting up the executable component of software for the first time (not to be confused with the common use of the term activation concerning a software license, which is a function of Digital Rights Management systems.)In larger software deployments on servers, the main copy of the software to be used by users - 'production' - might be installed on a production server in a production environment. Other versions of the deployed software may be installed in a test environment, development environment and disaster recovery environment.In complex continuous delivery environments and/or software as a service systems, differently-configured versions of the system might even exist simultaneously in the production environment for different internal or external customers (this is known as a multi-tenant architecture), or even be gradually rolled out in parallel to different groups of customers, with the possibility of canceling one or more of the parallel deployments. For example, Twitter is known to use the latter approach for A/B testing of new features and user interface changes. A 'hidden live' group can also be created within a production environment, consisting of servers that are not yet connected to the production load balancer, for the purposes of blue-green deployment."
    }
}

window.addEventListener("DOMContentLoaded", () => {
    document.getElementById("singleArticle").style.display = "none";
    populateAppDev();
});

document.getElementById("navigateAppDev").addEventListener('click', () => {
    populateAppDev();
});

function populateAppDev() {
    document.getElementById("articlesContainer").innerHTML = "";
    for(let i=0;i<Object.keys(applicationDev).length;i++) {
        let element = `<article class="article-container">
        <button onclick="makeDispear()" id="${Object.keys(applicationDev)[i]}" class="article-link" href="#">
            <img class="article-img" src="${applicationDev[Object.keys(applicationDev)[i]].imagePreviewLink}" alt="" srcset="">
            <h4 class="article-author">Authored by: ${applicationDev[Object.keys(applicationDev)[i]].authorName}</h4>
            <p class="article-summary">${applicationDev[Object.keys(applicationDev)[i]].articlePreview}</p>
        </button>
</article>`;
document.getElementById("articlesContainer").innerHTML += element;
    }
}

function singleDispear() {
    document.getElementById("singleArticle").style.display = "none";
}
function makeDispear() {
    document.getElementById("singleArticle").style.marginTop = "-1010px";     
    document.getElementById("singleArticle").style.display = "block";
}
